
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.1
  creationTimestamp: null
  name: resourceimports.multicluster.crd.antrea.io
spec:
  group: multicluster.crd.antrea.io
  names:
    kind: ResourceImport
    listKind: ResourceImportList
    plural: resourceimports
    singular: resourceimport
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ResourceImport is the Schema for the resourceimports API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ResourceImportSpec defines the desired state of ResourceImport
            properties:
              clusterID:
                description: ClusterID specifies the member cluster this resource
                  to import to. When not specified, import to all member clusters.
                type: string
              endpoints:
                description: If imported resource is EndPoints.
                items:
                  description: 'EndpointSubset is a group of addresses with a common
                    set of ports. The expanded set of endpoints is the Cartesian product
                    of Addresses x Ports. For example, given:   {     Addresses: [{"ip":
                    "10.10.1.1"}, {"ip": "10.10.2.2"}],     Ports:     [{"name": "a",
                    "port": 8675}, {"name": "b", "port": 309}]   } The resulting set
                    of endpoints can be viewed as:     a: [ 10.10.1.1:8675, 10.10.2.2:8675
                    ],     b: [ 10.10.1.1:309, 10.10.2.2:309 ]'
                  properties:
                    addresses:
                      description: IP addresses which offer the related ports that
                        are marked as ready. These endpoints should be considered
                        safe for load balancers and clients to utilize.
                      items:
                        description: EndpointAddress is a tuple that describes single
                          IP address.
                        properties:
                          hostname:
                            description: The Hostname of this endpoint
                            type: string
                          ip:
                            description: 'The IP of this endpoint. May not be loopback
                              (127.0.0.0/8), link-local (169.254.0.0/16), or link-local
                              multicast ((224.0.0.0/24). IPv6 is also accepted but
                              not fully supported on all platforms. Also, certain
                              kubernetes components, like kube-proxy, are not IPv6
                              ready. TODO: This should allow hostname or IP, See #4447.'
                            type: string
                          nodeName:
                            description: 'Optional: Node hosting this endpoint. This
                              can be used to determine endpoints local to a node.'
                            type: string
                          targetRef:
                            description: Reference to object providing the endpoint.
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              fieldPath:
                                description: 'If referring to a piece of an object
                                  instead of an entire object, this string should
                                  contain a valid JSON/Go field access statement,
                                  such as desiredState.manifest.containers[2]. For
                                  example, if the object reference is to a container
                                  within a pod, this would take on a value like: "spec.containers{name}"
                                  (where "name" refers to the name of the container
                                  that triggered the event) or if no container name
                                  is specified "spec.containers[2]" (container with
                                  index 2 in this pod). This syntax is chosen only
                                  to have some well-defined way of referencing a part
                                  of an object. TODO: this design is not final and
                                  this field is subject to change in the future.'
                                type: string
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                              namespace:
                                description: 'Namespace of the referent. More info:
                                  https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                type: string
                              resourceVersion:
                                description: 'Specific resourceVersion to which this
                                  reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                type: string
                            type: object
                        required:
                        - ip
                        type: object
                      type: array
                    notReadyAddresses:
                      description: IP addresses which offer the related ports but
                        are not currently marked as ready because they have not yet
                        finished starting, have recently failed a readiness check,
                        or have recently failed a liveness check.
                      items:
                        description: EndpointAddress is a tuple that describes single
                          IP address.
                        properties:
                          hostname:
                            description: The Hostname of this endpoint
                            type: string
                          ip:
                            description: 'The IP of this endpoint. May not be loopback
                              (127.0.0.0/8), link-local (169.254.0.0/16), or link-local
                              multicast ((224.0.0.0/24). IPv6 is also accepted but
                              not fully supported on all platforms. Also, certain
                              kubernetes components, like kube-proxy, are not IPv6
                              ready. TODO: This should allow hostname or IP, See #4447.'
                            type: string
                          nodeName:
                            description: 'Optional: Node hosting this endpoint. This
                              can be used to determine endpoints local to a node.'
                            type: string
                          targetRef:
                            description: Reference to object providing the endpoint.
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              fieldPath:
                                description: 'If referring to a piece of an object
                                  instead of an entire object, this string should
                                  contain a valid JSON/Go field access statement,
                                  such as desiredState.manifest.containers[2]. For
                                  example, if the object reference is to a container
                                  within a pod, this would take on a value like: "spec.containers{name}"
                                  (where "name" refers to the name of the container
                                  that triggered the event) or if no container name
                                  is specified "spec.containers[2]" (container with
                                  index 2 in this pod). This syntax is chosen only
                                  to have some well-defined way of referencing a part
                                  of an object. TODO: this design is not final and
                                  this field is subject to change in the future.'
                                type: string
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                              namespace:
                                description: 'Namespace of the referent. More info:
                                  https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                type: string
                              resourceVersion:
                                description: 'Specific resourceVersion to which this
                                  reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                type: string
                            type: object
                        required:
                        - ip
                        type: object
                      type: array
                    ports:
                      description: Port numbers available on the related IP addresses.
                      items:
                        description: EndpointPort is a tuple that describes a single
                          port.
                        properties:
                          appProtocol:
                            description: The application protocol for this port. This
                              field follows standard Kubernetes label syntax. Un-prefixed
                              names are reserved for IANA standard service names (as
                              per RFC-6335 and http://www.iana.org/assignments/service-names).
                              Non-standard protocols should use prefixed names such
                              as mycompany.com/my-custom-protocol. This is a beta
                              field that is guarded by the ServiceAppProtocol feature
                              gate and enabled by default.
                            type: string
                          name:
                            description: The name of this port.  This must match the
                              'name' field in the corresponding ServicePort. Must
                              be a DNS_LABEL. Optional only if one port is defined.
                            type: string
                          port:
                            description: The port number of the endpoint.
                            format: int32
                            type: integer
                          protocol:
                            default: TCP
                            description: The IP protocol for this port. Must be UDP,
                              TCP, or SCTP. Default is TCP.
                            type: string
                        required:
                        - port
                        type: object
                      type: array
                  type: object
                type: array
              externalentity:
                description: If imported resource is ExternalEntity.
                properties:
                  endpoints:
                    description: Endpoints is a list of external endpoints associated
                      with this entity.
                    items:
                      description: Endpoint refers to an endpoint associated with
                        the ExternalEntity.
                      properties:
                        ip:
                          description: IP associated with this endpoint.
                          type: string
                        name:
                          description: Name identifies this endpoint. Could be the
                            network interface name in case of VMs.
                          type: string
                      type: object
                    type: array
                  externalNode:
                    description: ExternalNode is the opaque identifier of the agent/controller
                      responsible for additional processing or handling of this external
                      entity.
                    type: string
                  ports:
                    description: Ports maintain the list of named ports.
                    items:
                      description: NamedPort describes the port and protocol to match
                        in a rule.
                      properties:
                        name:
                          description: Name associated with the Port.
                          type: string
                        port:
                          description: The port on the given protocol.
                          format: int32
                          type: integer
                        protocol:
                          default: TCP
                          description: The protocol (TCP, UDP, or SCTP) which traffic
                            must match. If not specified, this field defaults to TCP.
                          type: string
                      type: object
                    type: array
                type: object
              kind:
                description: Kind of imported resource.
                type: string
              name:
                description: Name of imported resource.
                type: string
              namespace:
                description: Namespace of imported resource.
                type: string
              node:
                description: If imported resource is Node (IPs)
                properties:
                  addresses:
                    description: 'List of addresses reachable to the node. Queried
                      from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses
                      Note: This field is declared as mergeable, but the merge key
                      is not sufficiently unique, which can cause data corruption
                      when it is merged. Callers should instead use a full-replacement
                      patch. See http://pr.k8s.io/79391 for an example.'
                    items:
                      description: NodeAddress contains information for the node's
                        address.
                      properties:
                        address:
                          description: The node address.
                          type: string
                        type:
                          description: Node address type, one of Hostname, ExternalIP
                            or InternalIP.
                          type: string
                      required:
                      - address
                      - type
                      type: object
                    type: array
                  allocatable:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: Allocatable represents the resources of a node that
                      are available for scheduling. Defaults to Capacity.
                    type: object
                  capacity:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: 'Capacity represents the total resources of a node.
                      More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity'
                    type: object
                  conditions:
                    description: 'Conditions is an array of current observed node
                      conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition'
                    items:
                      description: NodeCondition contains condition information for
                        a node.
                      properties:
                        lastHeartbeatTime:
                          description: Last time we got an update on a given condition.
                          format: date-time
                          type: string
                        lastTransitionTime:
                          description: Last time the condition transit from one status
                            to another.
                          format: date-time
                          type: string
                        message:
                          description: Human readable message indicating details about
                            last transition.
                          type: string
                        reason:
                          description: (brief) reason for the condition's last transition.
                          type: string
                        status:
                          description: Status of the condition, one of True, False,
                            Unknown.
                          type: string
                        type:
                          description: Type of node condition.
                          type: string
                      required:
                      - status
                      - type
                      type: object
                    type: array
                  config:
                    description: Status of the config assigned to the node via the
                      dynamic Kubelet config feature.
                    properties:
                      active:
                        description: Active reports the checkpointed config the node
                          is actively using. Active will represent either the current
                          version of the Assigned config, or the current LastKnownGood
                          config, depending on whether attempting to use the Assigned
                          config results in an error.
                        properties:
                          configMap:
                            description: ConfigMap is a reference to a Node's ConfigMap
                            properties:
                              kubeletConfigKey:
                                description: KubeletConfigKey declares which key of
                                  the referenced ConfigMap corresponds to the KubeletConfiguration
                                  structure This field is required in all cases.
                                type: string
                              name:
                                description: Name is the metadata.name of the referenced
                                  ConfigMap. This field is required in all cases.
                                type: string
                              namespace:
                                description: Namespace is the metadata.namespace of
                                  the referenced ConfigMap. This field is required
                                  in all cases.
                                type: string
                              resourceVersion:
                                description: ResourceVersion is the metadata.ResourceVersion
                                  of the referenced ConfigMap. This field is forbidden
                                  in Node.Spec, and required in Node.Status.
                                type: string
                              uid:
                                description: UID is the metadata.UID of the referenced
                                  ConfigMap. This field is forbidden in Node.Spec,
                                  and required in Node.Status.
                                type: string
                            required:
                            - kubeletConfigKey
                            - name
                            - namespace
                            type: object
                        type: object
                      assigned:
                        description: Assigned reports the checkpointed config the
                          node will try to use. When Node.Spec.ConfigSource is updated,
                          the node checkpoints the associated config payload to local
                          disk, along with a record indicating intended config. The
                          node refers to this record to choose its config checkpoint,
                          and reports this record in Assigned. Assigned only updates
                          in the status after the record has been checkpointed to
                          disk. When the Kubelet is restarted, it tries to make the
                          Assigned config the Active config by loading and validating
                          the checkpointed payload identified by Assigned.
                        properties:
                          configMap:
                            description: ConfigMap is a reference to a Node's ConfigMap
                            properties:
                              kubeletConfigKey:
                                description: KubeletConfigKey declares which key of
                                  the referenced ConfigMap corresponds to the KubeletConfiguration
                                  structure This field is required in all cases.
                                type: string
                              name:
                                description: Name is the metadata.name of the referenced
                                  ConfigMap. This field is required in all cases.
                                type: string
                              namespace:
                                description: Namespace is the metadata.namespace of
                                  the referenced ConfigMap. This field is required
                                  in all cases.
                                type: string
                              resourceVersion:
                                description: ResourceVersion is the metadata.ResourceVersion
                                  of the referenced ConfigMap. This field is forbidden
                                  in Node.Spec, and required in Node.Status.
                                type: string
                              uid:
                                description: UID is the metadata.UID of the referenced
                                  ConfigMap. This field is forbidden in Node.Spec,
                                  and required in Node.Status.
                                type: string
                            required:
                            - kubeletConfigKey
                            - name
                            - namespace
                            type: object
                        type: object
                      error:
                        description: Error describes any problems reconciling the
                          Spec.ConfigSource to the Active config. Errors may occur,
                          for example, attempting to checkpoint Spec.ConfigSource
                          to the local Assigned record, attempting to checkpoint the
                          payload associated with Spec.ConfigSource, attempting to
                          load or validate the Assigned config, etc. Errors may occur
                          at different points while syncing config. Earlier errors
                          (e.g. download or checkpointing errors) will not result
                          in a rollback to LastKnownGood, and may resolve across Kubelet
                          retries. Later errors (e.g. loading or validating a checkpointed
                          config) will result in a rollback to LastKnownGood. In the
                          latter case, it is usually possible to resolve the error
                          by fixing the config assigned in Spec.ConfigSource. You
                          can find additional information for debugging by searching
                          the error message in the Kubelet log. Error is a human-readable
                          description of the error state; machines can check whether
                          or not Error is empty, but should not rely on the stability
                          of the Error text across Kubelet versions.
                        type: string
                      lastKnownGood:
                        description: LastKnownGood reports the checkpointed config
                          the node will fall back to when it encounters an error attempting
                          to use the Assigned config. The Assigned config becomes
                          the LastKnownGood config when the node determines that the
                          Assigned config is stable and correct. This is currently
                          implemented as a 10-minute soak period starting when the
                          local record of Assigned config is updated. If the Assigned
                          config is Active at the end of this period, it becomes the
                          LastKnownGood. Note that if Spec.ConfigSource is reset to
                          nil (use local defaults), the LastKnownGood is also immediately
                          reset to nil, because the local default config is always
                          assumed good. You should not make assumptions about the
                          node's method of determining config stability and correctness,
                          as this may change or become configurable in the future.
                        properties:
                          configMap:
                            description: ConfigMap is a reference to a Node's ConfigMap
                            properties:
                              kubeletConfigKey:
                                description: KubeletConfigKey declares which key of
                                  the referenced ConfigMap corresponds to the KubeletConfiguration
                                  structure This field is required in all cases.
                                type: string
                              name:
                                description: Name is the metadata.name of the referenced
                                  ConfigMap. This field is required in all cases.
                                type: string
                              namespace:
                                description: Namespace is the metadata.namespace of
                                  the referenced ConfigMap. This field is required
                                  in all cases.
                                type: string
                              resourceVersion:
                                description: ResourceVersion is the metadata.ResourceVersion
                                  of the referenced ConfigMap. This field is forbidden
                                  in Node.Spec, and required in Node.Status.
                                type: string
                              uid:
                                description: UID is the metadata.UID of the referenced
                                  ConfigMap. This field is forbidden in Node.Spec,
                                  and required in Node.Status.
                                type: string
                            required:
                            - kubeletConfigKey
                            - name
                            - namespace
                            type: object
                        type: object
                    type: object
                  daemonEndpoints:
                    description: Endpoints of daemons running on the Node.
                    properties:
                      kubeletEndpoint:
                        description: Endpoint on which Kubelet is listening.
                        properties:
                          Port:
                            description: Port number of the given endpoint.
                            format: int32
                            type: integer
                        required:
                        - Port
                        type: object
                    type: object
                  images:
                    description: List of container images on this node
                    items:
                      description: Describe a container image
                      properties:
                        names:
                          description: Names by which this image is known. e.g. ["k8s.gcr.io/hyperkube:v1.0.7",
                            "dockerhub.io/google_containers/hyperkube:v1.0.7"]
                          items:
                            type: string
                          type: array
                        sizeBytes:
                          description: The size of the image in bytes.
                          format: int64
                          type: integer
                      required:
                      - names
                      type: object
                    type: array
                  nodeInfo:
                    description: 'Set of ids/uuids to uniquely identify the node.
                      More info: https://kubernetes.io/docs/concepts/nodes/node/#info'
                    properties:
                      architecture:
                        description: The Architecture reported by the node
                        type: string
                      bootID:
                        description: Boot ID reported by the node.
                        type: string
                      containerRuntimeVersion:
                        description: ContainerRuntime Version reported by the node
                          through runtime remote API (e.g. docker://1.5.0).
                        type: string
                      kernelVersion:
                        description: Kernel Version reported by the node from 'uname
                          -r' (e.g. 3.16.0-0.bpo.4-amd64).
                        type: string
                      kubeProxyVersion:
                        description: KubeProxy Version reported by the node.
                        type: string
                      kubeletVersion:
                        description: Kubelet Version reported by the node.
                        type: string
                      machineID:
                        description: 'MachineID reported by the node. For unique machine
                          identification in the cluster this field is preferred. Learn
                          more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html'
                        type: string
                      operatingSystem:
                        description: The Operating System reported by the node
                        type: string
                      osImage:
                        description: OS Image reported by the node from /etc/os-release
                          (e.g. Debian GNU/Linux 7 (wheezy)).
                        type: string
                      systemUUID:
                        description: SystemUUID reported by the node. For unique machine
                          identification MachineID is preferred. This field is specific
                          to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
                        type: string
                    required:
                    - architecture
                    - bootID
                    - containerRuntimeVersion
                    - kernelVersion
                    - kubeProxyVersion
                    - kubeletVersion
                    - machineID
                    - operatingSystem
                    - osImage
                    - systemUUID
                    type: object
                  phase:
                    description: 'NodePhase is the recently observed lifecycle phase
                      of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase
                      The field is never populated, and now is deprecated.'
                    type: string
                  volumesAttached:
                    description: List of volumes that are attached to the node.
                    items:
                      description: AttachedVolume describes a volume attached to a
                        node
                      properties:
                        devicePath:
                          description: DevicePath represents the device path where
                            the volume should be available
                          type: string
                        name:
                          description: Name of the attached volume
                          type: string
                      required:
                      - devicePath
                      - name
                      type: object
                    type: array
                  volumesInUse:
                    description: List of attachable volumes in use (mounted) by the
                      node.
                    items:
                      type: string
                    type: array
                type: object
              raw:
                description: 'If imported resource is ANP. TODO: ANP uses float64
                  as priority.  Type float64 is discouraged by k8s, and is not supported
                  by controller-gen tools. NetworkPolicy *v1alpha1.NetworkPolicySpec
                  `json:"networkpolicy,omitempty"` If imported resource Kind is unknown.'
                format: byte
                type: string
              serviceImport:
                description: If imported resource is ServiceImport.
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this
                      representation of an object. Servers should convert recognized
                      schemas to the latest internal value, and may reject unrecognized
                      values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource
                      this object represents. Servers may infer this from the endpoint
                      the client submits requests to. Cannot be updated. In CamelCase.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  metadata:
                    type: object
                  spec:
                    description: spec defines the behavior of a ServiceImport.
                    properties:
                      ips:
                        description: ip will be used as the VIP for this service when
                          type is ClusterSetIP.
                        items:
                          type: string
                        maxItems: 1
                        type: array
                      ports:
                        items:
                          description: ServicePort represents the port on which the
                            service is exposed
                          properties:
                            appProtocol:
                              description: The application protocol for this port.
                                This field follows standard Kubernetes label syntax.
                                Un-prefixed names are reserved for IANA standard service
                                names (as per RFC-6335 and http://www.iana.org/assignments/service-names).
                                Non-standard protocols should use prefixed names such
                                as mycompany.com/my-custom-protocol. Field can be
                                enabled with ServiceAppProtocol feature gate.
                              type: string
                            name:
                              description: The name of this port within the service.
                                This must be a DNS_LABEL. All ports within a ServiceSpec
                                must have unique names. When considering the endpoints
                                for a Service, this must match the 'name' field in
                                the EndpointPort. Optional if only one ServicePort
                                is defined on this service.
                              type: string
                            port:
                              description: The port that will be exposed by this service.
                              format: int32
                              type: integer
                            protocol:
                              default: TCP
                              description: The IP protocol for this port. Supports
                                "TCP", "UDP", and "SCTP". Default is TCP.
                              type: string
                          required:
                          - port
                          type: object
                        type: array
                        x-kubernetes-list-type: atomic
                      sessionAffinity:
                        description: 'Supports "ClientIP" and "None". Used to maintain
                          session affinity. Enable client IP based session affinity.
                          Must be ClientIP or None. Defaults to None. Ignored when
                          type is Headless More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                        type: string
                      sessionAffinityConfig:
                        description: sessionAffinityConfig contains session affinity
                          configuration.
                        properties:
                          clientIP:
                            description: clientIP contains the configurations of Client
                              IP based session affinity.
                            properties:
                              timeoutSeconds:
                                description: timeoutSeconds specifies the seconds
                                  of ClientIP type session sticky time. The value
                                  must be >0 && <=86400(for 1 day) if ServiceAffinity
                                  == "ClientIP". Default value is 10800(for 3 hours).
                                format: int32
                                type: integer
                            type: object
                        type: object
                      type:
                        description: type defines the type of this service. Must be
                          ClusterSetIP or Headless.
                        enum:
                        - ClusterSetIP
                        - Headless
                        type: string
                    required:
                    - ports
                    - type
                    type: object
                  status:
                    description: status contains information about the exported services
                      that form the multi-cluster service referenced by this ServiceImport.
                    properties:
                      clusters:
                        description: clusters is the list of exporting clusters from
                          which this service was derived.
                        items:
                          description: ClusterStatus contains service configuration
                            mapped to a specific source cluster
                          properties:
                            cluster:
                              description: cluster is the name of the exporting cluster.
                                Must be a valid RFC-1123 DNS label.
                              type: string
                          required:
                          - cluster
                          type: object
                        type: array
                        x-kubernetes-list-map-keys:
                        - cluster
                        x-kubernetes-list-type: map
                    type: object
                type: object
            type: object
          status:
            description: ResourceImportStatus defines the observed state of ResourceImport
            properties:
              memberClusterImportStatus:
                description: MemberClusterImportStatus reports resource import status
                  of member clusters.
                items:
                  description: MemberClusterImportStatus defines ResourceImport status
                    from one member cluster.
                  properties:
                    clusterID:
                      description: ClusterID is the member cluster ID.
                      type: string
                    error:
                      description: Error states the reason if import failed.
                      type: string
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
