// Copyright 2019 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vmware-tanzu/antrea/pkg/agent/route (interfaces: Client)

// Package testing is a generated GoMock package.
package testing

import (
	gomock "github.com/golang/mock/gomock"
	netlink "github.com/vishvananda/netlink"
	config "github.com/vmware-tanzu/antrea/pkg/agent/config"
	net "net"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddPeerCIDRRoute mocks base method
func (m *MockClient) AddPeerCIDRRoute(arg0 *net.IPNet, arg1 int, arg2, arg3 net.IP) ([]*netlink.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPeerCIDRRoute", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*netlink.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPeerCIDRRoute indicates an expected call of AddPeerCIDRRoute
func (mr *MockClientMockRecorder) AddPeerCIDRRoute(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPeerCIDRRoute", reflect.TypeOf((*MockClient)(nil).AddPeerCIDRRoute), arg0, arg1, arg2, arg3)
}

// DeletePeerCIDRRoute mocks base method
func (m *MockClient) DeletePeerCIDRRoute(arg0 []*netlink.Route) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePeerCIDRRoute", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePeerCIDRRoute indicates an expected call of DeletePeerCIDRRoute
func (mr *MockClientMockRecorder) DeletePeerCIDRRoute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePeerCIDRRoute", reflect.TypeOf((*MockClient)(nil).DeletePeerCIDRRoute), arg0)
}

// Initialize mocks base method
func (m *MockClient) Initialize(arg0 *config.NodeConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockClientMockRecorder) Initialize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockClient)(nil).Initialize), arg0)
}

// ListPeerCIDRRoute mocks base method
func (m *MockClient) ListPeerCIDRRoute() (map[string][]*netlink.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPeerCIDRRoute")
	ret0, _ := ret[0].(map[string][]*netlink.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPeerCIDRRoute indicates an expected call of ListPeerCIDRRoute
func (mr *MockClientMockRecorder) ListPeerCIDRRoute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPeerCIDRRoute", reflect.TypeOf((*MockClient)(nil).ListPeerCIDRRoute))
}

// MigrateRoutesToGw mocks base method
func (m *MockClient) MigrateRoutesToGw(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateRoutesToGw", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MigrateRoutesToGw indicates an expected call of MigrateRoutesToGw
func (mr *MockClientMockRecorder) MigrateRoutesToGw(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateRoutesToGw", reflect.TypeOf((*MockClient)(nil).MigrateRoutesToGw), arg0)
}

// RemoveServiceRouting mocks base method
func (m *MockClient) RemoveServiceRouting() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveServiceRouting")
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveServiceRouting indicates an expected call of RemoveServiceRouting
func (mr *MockClientMockRecorder) RemoveServiceRouting() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveServiceRouting", reflect.TypeOf((*MockClient)(nil).RemoveServiceRouting))
}

// SetupPassThrough mocks base method
func (m *MockClient) SetupPassThrough(arg0 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupPassThrough", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetupPassThrough indicates an expected call of SetupPassThrough
func (mr *MockClientMockRecorder) SetupPassThrough(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupPassThrough", reflect.TypeOf((*MockClient)(nil).SetupPassThrough), arg0)
}

// UnMigrateRoutesFromGw mocks base method
func (m *MockClient) UnMigrateRoutesFromGw(arg0 *net.IPNet, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnMigrateRoutesFromGw", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnMigrateRoutesFromGw indicates an expected call of UnMigrateRoutesFromGw
func (mr *MockClientMockRecorder) UnMigrateRoutesFromGw(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnMigrateRoutesFromGw", reflect.TypeOf((*MockClient)(nil).UnMigrateRoutesFromGw), arg0, arg1)
}
